{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","console","log","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bba6d5e2.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              </li>\r\n             {/*  <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n           { /*<form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n              </form>*/}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title : PropTypes.string,\r\n                    aboutText :PropTypes.string,\r\n                }\r\n\r\nNavbar.defaultProps ={\r\n    title: 'set title here',\r\n    aboutText: 'About '\r\n}             ","import React, {useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n       // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n      // console.log(\"Uppercase was clicked\" + text);\r\n       let newText = text.toLowerCase();\r\n       setText(newText)\r\n       props.showAlert(\"Converted to lowercase!\", \"success\");\r\n   }\r\n   const handleExtraSpaces = ()=>{\r\n       let newText = text.split(/[ ]+/);\r\n       setText(newText.join(\"\"))\r\n       props.showAlert(\"Extra spaces removed!\", \"success\");\r\n   }\r\n\r\n   const handleCopy = ()=>{\r\n      console.log(\"I am copy\");\r\n      var text = document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n   }\r\n\r\n   const handleClearClick = ()=>{\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n     let newText ='';\r\n     setText(newText)\r\n     props.showAlert(\"Clear the text!\", \"success\");\r\n   }\r\n  \r\n    const handleOnchange = (event)=>{\r\n      //  console.log(\"On changed\");\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n   // text = \"new text\";// Wrong way to change the state\r\n   // setText(\"new text\");// Correct way to change the state\r\n    return (\r\n       <>\r\n       <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}} >\r\n           <h4>{props.heading}</h4>\r\n           <div className=\"mb-3\">\r\n           <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n           </div>\r\n          \r\n           <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces </button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy</button>\r\n           <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\"  style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n           <h5>Your text summary</h5>\r\n           <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n           <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n           <h5>Preview</h5>\r\n           <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n       </div>\r\n       </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n    const capitalize = (word)=>{\r\n      const lower = word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n     props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        \r\n      </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n//import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n{/*  import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"; */}\n \n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or nots\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() =>{\n       setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor ='#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(()=>{\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(()=>{\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor ='white';\n      showAlert(\"light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/*<Navbar title=\"TextUtils\" aboutText= \"About TextUtils\"/>*/ }\n    {/*<Navbar/>*/}\n   {/*  <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} /> \n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n      {/* /users --> Component 1\n      /users/home --> --> Component 2 */}\n         {/*  <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n         {/*  <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter The text to analyze below\" mode={mode} />\n         {/*  </Route> */}\n    {/* </Switch> */}\n    </div>\n   {/*  </Router> */}\n    </>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}